labs(
title = "Confirmed COVID-19 deaths relative to the size of the population",
subtitle = "More than 3 Million confirmed Covid-19 deaths worldwide",
caption = "Date: 05/07/2021") +
theme(axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
theme(title = element_text(face = "bold", color = "Black"),
legend.position  = "right")
world <- map_data("world")
covid_coord <- merge(x=world,y=covid_data_tbl, by.x = "region", by.y = "location")%>%
select(region, long,lat,Mortality_Rate)
# creating world map plot using geom map
covid_coord %>% ggplot() +
geom_map(aes(x = long, y = lat, map_id = region, fill = Mortality_Rate), map = world) +
# Plot labeling
scale_fill_continuous(labels = scales::percent_format(accuracy = 0.001), low = "green4", high = "red4") +
labs(
title = "Confirmed COVID-19 deaths relative to the size of the population",
subtitle = "More than 3 Million confirmed Covid-19 deaths worldwide",
caption = "Date: 05/07/2021") +
theme(axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) +
theme(title = element_text(face = "bold", color = "slateblue2"),
legend.position  = "right")
# Importing Libraries
library(tidyverse)
library(lubridate)
library(ggthemes)
library(maps)
library(ggrepel)
library(purrr)
#Loading and preprocessing  data
covid_data_tbl <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv") %>%
select(location, date, total_cases) %>%
filter(location == "Germany" | location == "United Kingdom" | location == "France" | location == "Spain" | location == "United States")%>%
mutate(cases_dec = scales::dollar(total_cases, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = ""))
#Data Visualization challenge 1 : plotting data
covid_data_tbl %>%
ggplot(aes(x = date, y = total_cases, color = location)) +
geom_line(size = 1) +
geom_label_repel(aes(x=date, y=total_cases, label=cases_dec) ,
data = covid_data_tbl %>% slice(which.max(total_cases)),
vjust = 0.5,
hjust = 0.5,color = "red")+
expand_limits(y = 0) +
scale_y_continuous(labels = scales::dollar_format(scale = 1/1e6,
prefix = "",
suffix = "M")) +
scale_x_date(date_labels = "%B %Y",
date_breaks = "1 month",
expand = c(0,NA)) +
# Plot labeling
labs(
title = "Worldwide Covid-19 Confirmed cases",
subtitle = "As of 08/05/2021",
x = "Months",
y = "Cumulative Cases",
color = "Country or Location"
)  +
theme_light() +
theme(title = element_text(face = "bold", color = "cyan4"),
legend.position  = "Right",
axis.text.x = element_text(angle = 90))
# Loading libraries
library(tidyverse)
library(readxl)
library(lubridate)
# Importing files
bikes_tbl <- read_excel('bikes.xlsx')
orderlines_tbl <- read_excel('orderlines.xlsx')
bikeshops_tbl <- read_excel('bikeshops.xlsx')
# Joining data by means of Entity-relationship diagrams(ERD)
#left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))
joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
# Data wrangling
wrangled_tbl <- joined_tbl %>%
# separating location column into state and city
separate(col = location, into = c("city", "state"), sep = ", ") %>%
# Adding a column that will calculate total price
mutate(total.price = price * quantity)
# sales by location(state)
sales_by_location_tbl <- wrangled_tbl %>%
# select columns
select(state, total.price) %>%
# grouping by state and summarizing sales
group_by(state) %>%
summarize(sales = sum(total.price)) %>%
# adding a column that turns the numbers into a currency format
mutate(sales.text = scales::dollar(sales, big.mark = ".", decimal.mark = ",", prefix = "", suffix = "???"))
# visualization(sales by state)
sales_by_location_tbl %>%
# Setup canvas with the columns state (x-axis) and sales (y-axis)
ggplot(aes(x = state, y = sales)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales.text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Formatting
# scale_y_continuous(labels = scales::dollar) + # Change the y-axis.
# Again, we have to adjust it for euro values
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "???")) +
labs(
title    = "Revenue by state",
subtitle = "Upward Trend",
x = "State", # Override defaults for x and y
y = "Revenue"
)
# sales by location(state) and year
sales_by_location_year_tbl <- wrangled_tbl %>%
# selecting columns and adding a year column
select(order.date, total.price, state) %>%
mutate(year = year(order.date)) %>%
# grouping by and summarizing sales according to year and location(state)
group_by(year, state) %>%
summarise(sales = sum(total.price)) %>%
ungroup() %>%
mutate(sales.text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "???"))
sales_by_location_year_tbl
# visualization( sales by year and state)
sales_by_location_year_tbl %>%
# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = state)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col() + # Run up to here to get a stacked bar plot
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Facet
facet_wrap(~ state) +
# Formatting
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "???")) +
labs(
title = "Revenue by State and Year",
subtitle = "All The Products are Showing Increment In Revenue Except Saxony-Anhalt
M.W.P. and Schleswig-Holstein",
fill = "States" # Changes the legend name to state
)
sales_by_location_tbl %>%
# Setup canvas with the columns state (x-axis) and sales (y-axis)
ggplot(aes(x = state, y = sales)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales.text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Formatting
# scale_y_continuous(labels = scales::dollar) + # Change the y-axis.
# Again, we have to adjust it for euro values
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "&euro")) +
labs(
title    = "Revenue by state",
subtitle = "Upward Trend",
x = "State", # Override defaults for x and y
y = "Revenue"
)
bikes_tbl <- read_excel('bikes.xlsx')
orderlines_tbl <- read_excel('orderlines.xlsx')
bikeshops_tbl <- read_excel('bikeshops.xlsx')
# Joining data by means of Entity-relationship diagrams(ERD)
#left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))
joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
# Data wrangling
wrangled_tbl <- joined_tbl %>%
# separating location column into state and city
separate(col = location, into = c("city", "state"), sep = ", ") %>%
# Adding a column that will calculate total price
mutate(total.price = price * quantity)
# sales by location(state)
sales_by_location_tbl <- wrangled_tbl %>%
# select columns
select(state, total.price) %>%
# grouping by state and summarizing sales
group_by(state) %>%
summarize(sales = sum(total.price)) %>%
# adding a column that turns the numbers into a currency format
mutate(sales.text = scales::dollar(sales, big.mark = ".", decimal.mark = ",", prefix = "", suffix = "euro"))
# visualization(sales by state)
sales_by_location_tbl %>%
# Setup canvas with the columns state (x-axis) and sales (y-axis)
ggplot(aes(x = state, y = sales)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales.text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Formatting
sales_by_location_tbl %>%
# Setup canvas with the columns state (x-axis) and sales (y-axis)
ggplot(aes(x = state, y = sales)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales.text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Formatting
# scale_y_continuous(labels = scales::dollar) + # Change the y-axis.
# Again, we have to adjust it for euro values
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "euro")) +
labs(
title    = "Revenue by state",
subtitle = "Upward Trend",
x = "State", # Override defaults for x and y
y = "Revenue"
)
# Loading libraries
library(tidyverse)
library(readxl)
library(lubridate)
# Importing files
bikes_tbl <- read_excel('bikes.xlsx')
orderlines_tbl <- read_excel('orderlines.xlsx')
bikeshops_tbl <- read_excel('bikeshops.xlsx')
# Joining data by means of Entity-relationship diagrams(ERD)
#left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))
joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
# Data wrangling
wrangled_tbl <- joined_tbl %>%
# separating location column into state and city
separate(col = location, into = c("city", "state"), sep = ", ") %>%
# Adding a column that will calculate total price
mutate(total.price = price * quantity)
# sales by location(state)
sales_by_location_tbl <- wrangled_tbl %>%
# select columns
select(state, total.price) %>%
# grouping by state and summarizing sales
group_by(state) %>%
summarize(sales = sum(total.price)) %>%
# adding a column that turns the numbers into a currency format
mutate(sales.text = scales::dollar(sales, big.mark = ".", decimal.mark = ",", prefix = "", suffix = "euro"))
# visualization(sales by state)
sales_by_location_tbl %>%
# Setup canvas with the columns state (x-axis) and sales (y-axis)
ggplot(aes(x = state, y = sales)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales.text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Formatting
# scale_y_continuous(labels = scales::dollar) + # Change the y-axis.
# Again, we have to adjust it for euro values
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "euro")) +
labs(
title    = "Revenue by state",
subtitle = "Upward Trend",
x = "State", # Override defaults for x and y
y = "Revenue"
)
# sales by location(state) and year
sales_by_location_year_tbl <- wrangled_tbl %>%
# selecting columns and adding a year column
select(order.date, total.price, state) %>%
mutate(year = year(order.date)) %>%
# grouping by and summarizing sales according to year and location(state)
group_by(year, state) %>%
summarise(sales = sum(total.price)) %>%
ungroup() %>%
mutate(sales.text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "euro"))
sales_by_location_year_tbl
# visualization( sales by year and state)
sales_by_location_year_tbl %>%
# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = state)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col() + # Run up to here to get a stacked bar plot
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Facet
facet_wrap(~ state) +
# Formatting
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "euro")) +
labs(
title = "Revenue by State and Year",
subtitle = "All The Products are Showing Increment In Revenue Except Saxony-Anhalt
M.W.P. and Schleswig-Holstein",
fill = "States" # Changes the legend name to state
)
result_2a <- sales_by_location_tbl
write_rds(result_2a, "result2a.rds")
result_2b <- sales_by_location_year_tbl
write_rds(result_2b, "result2b.rds")
bikes_tbl <- read_excel('bikes.xlsx')
orderlines_tbl <- read_excel('orderlines.xlsx')
bikeshops_tbl <- read_excel('bikeshops.xlsx')
# Joining data by means of Entity-relationship diagrams(ERD)
#left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))
joined_tbl <- orderlines_tbl %>%
left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
# Data wrangling
wrangled_tbl <- joined_tbl %>%
# separating location column into state and city
separate(col = location, into = c("city", "state"), sep = ", ") %>%
# Adding a column that will calculate total price
mutate(total.price = price * quantity)
# sales by location(state)
sales_by_location_tbl <- wrangled_tbl %>%
# select columns
select(state, total.price) %>%
# grouping by state and summarizing sales
group_by(state) %>%
summarize(sales = sum(total.price)) %>%
# adding a column that turns the numbers into a currency format
mutate(sales.text = scales::dollar(sales, big.mark = ".", decimal.mark = ",", prefix = "", suffix = "€"))
# visualization(sales by state)
sales_by_location_tbl %>%
# Setup canvas with the columns state (x-axis) and sales (y-axis)
ggplot(aes(x = state, y = sales)) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales.text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
# Formatting
# scale_y_continuous(labels = scales::dollar) + # Change the y-axis.
# Again, we have to adjust it for euro values
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "€")) +
labs(
title    = "Revenue by state",
subtitle = "Upward Trend",
x = "State", # Override defaults for x and y
y = "Revenue"
)
# sales by location(state) and year
sales_by_location_year_tbl <- wrangled_tbl %>%
# selecting columns and adding a year column
select(order.date, total.price, state) %>%
mutate(year = year(order.date)) %>%
# grouping by and summarizing sales according to year and location(state)
group_by(year, state) %>%
summarise(sales = sum(total.price)) %>%
ungroup() %>%
mutate(sales.text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = "€"))
library(httr)
library(glue)
library(tibble)
library(jsonlite)
library(tidyverse)
library(purrr)
library(stringr)
response <- GET("https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2021-05-01/2021-05-06")
response
rawToChar(response$content)
response1 <- content(response)
response1
resp <- pluck(response1, 2)
resp
#as_tibble(resp)
result_3a <- resp
write_rds(result_3a,"result3a.rds")
response <- resp %>%
.$content %>%
rawToChar() %>%
fromJSON()
#reorganize in tibble
output_tbl <- response %>% select(name, web_pages) %>% rename(Name = name, Website = web_pages)
#plot
output_tbl %>% head(n = 5)
#reorganize in tibble
output_tbl <- response %>% select(name, web_pages) %>% rename(Name = name, Website = web_pages)
library(httr)
library(jsonlite)
library(dplyr)
library(glue)
my_apikey <- Sys.getenv("pwd")
url <- modify_url(url = "http://dataservice.accuweather.com", path = glue("/locations/v1/topcities/100?apikey={my_apikey}&language=en-us&details=false"))
resp <- GET(url)
country_list <- resp %>% .$content %>% rawToChar() %>% fromJSON()
City <- country_list$EnglishName
Country <- country_list$Country$EnglishName
Region <- country_list$Region$EnglishName
Longitude <- country_list$GeoPosition$Longitude
Latitude <- country_list$GeoPosition$Latitude
Timezone <- country_list$TimeZone$Name
#optional to add GMT_Offset, it's only removed so that printing fits the screen
#GMT_Offset <- country_list$TimeZone$GmtOffset
country_list_as_df <- data.frame(City, Country, Region,
Longitude, Latitude, Timezone)
head(country_list_as_df, 10)
install.packages('httr')
install.packages("httr")
install.packages('glue')
install.packages("glue")
install.packages("glue")
install.packages('jsonlite')
library(httr)
library(jsonlite)
library(dplyr)
library(glue)
my_apikey <- Sys.getenv("pwd")
url <- modify_url(url = "http://dataservice.accuweather.com", path = glue("/locations/v1/topcities/100?apikey={my_apikey}&language=en-us&details=false"))
resp <- GET(url)
country_list <- resp %>% .$content %>% rawToChar() %>% fromJSON()
City <- country_list$EnglishName
Country <- country_list$Country$EnglishName
Region <- country_list$Region$EnglishName
Longitude <- country_list$GeoPosition$Longitude
Latitude <- country_list$GeoPosition$Latitude
Timezone <- country_list$TimeZone$Name
#optional to add GMT_Offset, it's only removed so that printing fits the screen
#GMT_Offset <- country_list$TimeZone$GmtOffset
country_list_as_df <- data.frame(City, Country, Region,
Longitude, Latitude, Timezone)
head(country_list_as_df, 10)
library(jsonlite)
library(glue)
library(RSQLite)
library(httr)
library(xml2)
library(tidyverse)
library(tibble)
library(readr)
library(dplyr)
library(magrittr)
library(tidyr)
library(stringr)
library(ggplot2)
#shows the 7 days weather forecast in hamburg
#the longitude and lattitude can be typed into the URL directly:
resp <- GET("http://www.7timer.info/bin/api.pl?lon=53.55&lat=9.99&product=civillight&output=json")
weather_data<- resp %>%
.$content %>%
rawToChar() %>%
fromJSON()
forecast <- weather_data[[3]]
forecast
library(jsonlite)
library(glue)
library(RSQLite)
library(httr)
library(xml2)
library(tidyverse)
library(tibble)
library(readr)
library(dplyr)
library(magrittr)
library(tidyr)
library(stringr)
library(ggplot2)
response <- GET("https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2021-05-01/2021-05-06")
corona_data<- resp %>%
.$content %>%
rawToChar() %>%
fromJSON()
changed_data <- corona_data[[3]]
changed_data
library(jsonlite)
library(glue)
library(RSQLite)
library(httr)
library(xml2)
library(tidyverse)
library(tibble)
library(readr)
library(dplyr)
library(magrittr)
library(tidyr)
library(stringr)
library(ggplot2)
response <- GET("https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2021-05-01/2021-05-06")
corona_data<- resp %>%
.$content %>%
rawToChar() %>%
fromJSON()
changed_data <- corona_data[[3]]
changed_data
response <- GET("https://covidtrackerapi.bsg.ox.ac.uk/api/v2/stringency/date-range/2021-05-01/2021-05-06")
corona_data<- resp %>%
.$content %>%
rawToChar() %>%
fromJSON()
changed_data <- corona_data[[3]]
changed_data
resp <- GET('http://www.7timer.info/bin/api.pl?lon=53.55&lat=9.99&product=civillight&output=json')
air_data<- resp %>%
.$content %>%
rawToChar() %>%
fromJSON()
changed_data <- corona_data[[3]]
changed_data
